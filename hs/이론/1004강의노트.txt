프로그레시브 웹 --> 모바일, 웹 모두 가능 (안드로이드, ios)
프로그레시브 웹앱 할 때는 뷰가 더 잘 맞다.

리액트: 웹에 강점, vue: 모바일 강점

장고: 더 복잡하지만 만들어놓고 보면 잘 실행이 된다.
express가 필요하신 분은 노드로 서버를 만드실 분이 계신거죠?

----2교시----
library: python style-- import lib, lib.class.method()
framework: import jango
main(   ):
    jango.method(   ) --> 실행 흐름 자체를 장고가 가져간다. 플라스크처럼 자유롭지 못하다. 장고가 규정해놓은 방식으로만.

라이브러리: 텐서플로, 파이토치, 노드js
프레임워크: 디장고, 플라스크, 리액트, 뷰

API는 프레임워크가 아니라 라이브러리랑 비교되는 개념.
Application Programming Interface
라이브러리는 열면 글자가 보이는데, api는 열면 글자가 안보인다.
import lib 를 열면 글자가 보이는데, api 는 글자가 안보인다. (무슨 말일까.)
API는 글자가 생략되있는 라이브러리...?

컴파일타임 이전이 스태틱 (스태틱 -> 컴파일타임 -> 런타임)
다이너믹 라이브러리는 실행하는 와중에 제공이 되야함.

스태틱 라이브러리는 컴파일 전
다이너믹 라이브러리는 실행한 후 
static: .so .a
dynamic: .dll

----3교시----
네트워크 7계층
7계층 http 계층에 대해 더 자세하게 알아야 한다. (http 프로토콜) (웹이나 어플을 만들어야 한다면)

rpc-http rpc-tcp
RPC = remote procedual call
RPC를 7계층이랑 4계층 (http, tcp) 기반해서 쓸 수 있다.
요즘에는 다 7계층(http)기반으로 다 바뀌고 있다.
http protocol 내부에는 속성이 쫙 있는데, 웹 개발자는 자세하게 알고 있어야 한다.
에러코드도 거기 메세지를 보고 파악하게 된다.

----4교시----
포트는 프로세스에 할당되는 번호다.
3티어 아키텍쳐는 백엔드 구성하면서 만나게 될 것이다.

Node.Js
정리하고 나서 클론코딩

이후 점심에 Node.Js 프로퍼티와 메소드 쭉 했음.