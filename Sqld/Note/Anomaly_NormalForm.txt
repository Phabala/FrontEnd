https://itwiki.kr/w/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%A0%95%EA%B7%9C%ED%99%94
https://hoyeonkim795.github.io/posts/normalization-course/

이상(Anomaly) 현상
- 정규화를 거치지 않은 데이터베이스에서 발생할 수 있는 현상
- 데이터들이 불필요하게 중복되어 릴레이션 조작에 예기치 못한 문제 발생
- 속성들의 종속 관계를 하나의 릴레이션에 표현하기 때문에 발생

이상 종류 (자세한건 정규화과정 예시 참고)
- 삽입 이상(Insertion Anomaly): 데이터 삽입 시 의도와 다른 값들도 삽입됨
- 삭제 이상(Delete Anomaly): 데이터 삭제 시 의도와 다른 값들도 연쇄 삭제됨
- 갱신 이상(Update Anomaly): 속성값 갱신 시 일부 튜플만 갱신되어 모순 발생

정규화 목적:
- 중복을 배제하여 삽입, 삭제, 갱신 이상의 발생을 방지
- 각 릴레이션에 중복된 종속성을 여러개의 릴레이션에 분할
- 어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 함
- 데이터 삽입 시 릴레이션을 재구성할 필요성 감소
- 효과적인 검색 알고리즘 생성 가능

<정규화 과정>

1NF (First Normal Form)
1NF를 만족하려면 [도메인이 원자값]이어야 한다.

    ex) [[수강과목, 수강자],[[수학, 홍길동], [과학, [임꺽정, 심사인당]], [사회, [홍길동, 임꺽정]]]
    --> 수강자 속성이 원자값이 아니다. ([임꺽정, 신사임당], [홍길동, 임꺽정])
    
    발생할 수 있는 이상(Anomaly)의 예
        - 갱신이상) 홍길동이 사회과목을 '역사'로 바꾸었다. 그럼 임꺽정이 듣고 있는 사회 과목도 바뀌어버린다.
            UPDATE 과목 SET 수강과목 = '역사' WHERE 수강과목 = '사회' AND 수강자 = '홍길동';
        - 삭제이상) 임꺽정이 '과학' 과목을 수강취소했다. 그럼 신사임당의 수강 정보도 삭제된다.
            DELETE FROM 과목 WHERE 수강과목 = '과학' AND 수강자 = '임꺽정';
    
    1NF를 만족시키는 릴레이션:
        [[수강과목, 수강자, 일련번호], [수학, 홍길동, 1], [과학, 임꺽정, 2], [과학, 신사임당, 3], [사회, 홍길동, 4], [사회, 임꺽정, 5]]

2NF (Second Normal Form)
2NF를 만족하려면 [부분적 함수 종속]을 제거해야 한다.
즉 완전 함수 종속이 되도록 해야 한다.

완전 함수 종속: 기본 키의 부분집합(부분키)이 결정자가 되어선 안된다.
--> 학번의 부분집합인 소속학과가 학과장의 결정자가 되어선 안된다.

    ex) [[학번, 이름, 소속학과, 학과장]]
        [1901, 홍길동, 컴퓨터과, 김교수]
        [1845, 임꺽정, 전자과, 박교수]
        [1706, 신사임당, 기계과, 천교수]
        [1925, 장영실, 컴퓨터과, 김교수]

        - 학번 <-> 이름+소속+학과장은 종속 관계가 있다. (한 학과내의 이름은 중복되지 않는다고 가정)
        - 하지만 사실 학과장은 소속학과 하나만에도 종속(소속학과 <-> 학과장)되므로 이는 부분적인 종속관계가 포함되어 있다.
        - 즉 학과장은 꼭 이 릴레이션에 있어야 할 필요도 없고, 이 릴레이션에 있는 순간 '김교수'와 같이 계속 중복적재 될 것이다.
        - 지도교수 사무실도 학번에(끊겼는데 대충 무슨 말일지는 알 것 같다.)
    
    발생할 수 있는 이상(Anomaly)의 예
        - 삽입이상: 컴퓨터과, 전자과, 기계과 학생을 추가하고자 할 경우 더이상 불필요한 중복정보인 학과장 정보가 삽입되야 한다.
        - 갱신이상: 컴퓨터과의 학과장이 변경되었다. 하나만 변경하면 모순이 발생하므로 다 찾아서 변경해야 한다.
        - 삭제이상: 신사임당이 자퇴해서 삭제하고자 한다. 이 삭제로 인해 기계과 학과장의 정보가 사라져버린다.
    
    2NF를 만족시키는 릴레이션:
        [[학번, 이름, 소속학과]]
        [1901, 홍길동, 컴퓨터과]
        [1845, 임꺽정, 전자과]
        [1706, 신사임당, 기계과]
        [1925, 장영실, 컴퓨터과]

        [[학과, 학과장]]
        [컴퓨터과, 김교수]
        [전자과, 박교수]
        [기계과, 천교수]
        
        이와 같이 릴레이션을 구분하는 것이 바람직하다.

        하지만 아직 Anomaly가 사라진 것은 아니다.
        위의 테이블 같은 경우에는 너무 간단해서 Anomaly가 없지만
        복잡한 테이블의 경우에는 2차 정규화 까지만 했을 경우에도 Anomaly가 남아있는 경우가 있다.

        [[학번, 과목코드, 성적, 학부, 등록금]]
        [20800399, CES011101, A+, 컴퓨터공학부, 350]
        [20800399, CSE022202, A, 컴퓨터공학부, 350]
        [20800399, CSE033303, B+, 컴퓨터공학부, 350]
        [21300758, MEC011101, F, 경영학부, 300]
        [21400001, POD032939, C+, 기계공학부, 400]
        [21500399, CSE011101, D, 컴퓨터공학부, 350]

        학번, 과목코드 --> 성적
        학번, 과목코드 --> 학부
        학번, 과목코드 --> 등록금
        학번 --> 학부
        학번 --> 등록금

        두 개의 부분 함수 종속성을 가진다.
        이를 제거하여 제2 정규화를 시킬 수 있다.

        [[학번, 학부, 등록금]]
        [20800399, 컴퓨터공학부, 350]
        [21300758, 경영학부, 300]
        [21400001, 기계공학부, 400]
        [21500399, 컴퓨터공학부, 350]

        [[학번, 과목코드, 성적]]
        [20800399, CSE011101, A+]
        [20800399, CSE022202, A]
        [20800399, CSE033303, B+]
        [21300758, MEC011101, F]
        [21400001, POD032939, C+]
        [21500399, CSE011101, D]

        아직 Anomaly는 남아있다.

        - 삽입이상: 새로운 학부가 생기는 경우 등록된 학생(학번)이 없다면 학번속성이 NULL이 되므로 삽입할 수 없다.
        - 갱신이상: 컴퓨터공학부 등록금이 400으로 오르는 경우 20800399, 21500399 둘 모두 바꾸어 주지 않으면 데이터 불일치 문제가 발생한다.
        - 삭제이상: 21400001 학번을 가진 학생이 자퇴하는 경우, 기계공학부에 대한 정보가 함께 사라진다.
        
        제2정규형에서도 이상현상이 발생하는 이유는 이행적 함수 종속이 존재하기 때문이다. 이행적 함수 종속을 없애주는 과정이 제 3 정규화이다.
        

3NF (Third Normal Form)
3NF를 만족하려면 [이행적 함수 종속]을 제거해야 한다.
- 이행적 함수 종속 : A-->B 이고 B-->C 일 때 A-->C 인 관계

정확하게 다음 두 조건을 만족하면 제 3 정규화라 볼 수 있다.
    1. Relation이 제 2 정규화 되었다. (The relation is in second normal form)
    2. 기본 키(primary key)가 아닌 속성(Attribute)들은 기본 키에만 의존해야 한다.

    예시) {Tournament, Year} 후보키
    Winner Date of Birth 은 기본키가 아닌 속성키인 Winner를 거쳐 {Tournament, Year}에 의존하고 있다.
    --> 2번 조건을 위반한다.

    (Tournament Winners)
    [[Tournament, Year, Winner, Winner Date of Birth]]
    [Indiana Invitational, 1998, AlFredrickson, 21 July 1975]
    [Cleveland Open, 1999, Bob Albertson, 28 September 1968]
    [Des Moines Masters, 1999, Al Fredrickson, 21 July 1975]
    [Indiana Invitational, 1999, Chip Masterson, 14 March 1977]
    
    제3 정규화를 만족하는 테이블
    (Tournament Winners)                            (Winner Dates of Birth)
    [[Tournament, Year, Winner]]                    [[Winner, Date of Birth]]
    [Indiana Invitational, 1998, Al Fredrickson]    [Chip Masterson, 14 March 1977]
    [Cleveland Open, 1999, Bob Albertson]           [Al Fredrickson, 21 July 1975]
    [Des Moines Masters, 1999, Al fredrickson]      [Bob Albertson, 28 September 1968]
    [Indiana Invitational, 1999, Chip Masterson]

    BCNF
    --> 문제 풀면서 하자